import { AppDefinition } from '../types';

// A type guard to check if a module has an appDefinition
function hasAppDefinition(
  module: any,
): module is { appDefinition: AppDefinition } {
  return (
    module &&
    typeof module.appDefinition === 'object' &&
    module.appDefinition !== null
  );
}

let allAppsCache: AppDefinition[] | null = null;

export const getAppDefinitions = async (): Promise<AppDefinition[]> => {
    if (allAppsCache) {
        return allAppsCache;
    }

    // Use import.meta.glob to dynamically find all App.tsx files.
    // This will find both the built-in apps and the ones generated by the App Store.
    const appModules = import.meta.glob('./**/*App.tsx');

    const definitions: AppDefinition[] = [];
    for (const path in appModules) {
        const module = await appModules[path]();
        if (hasAppDefinition(module)) {
            // The component is the default export, so we need to assign it.
            module.appDefinition.component = (module as any).default;
            definitions.push(module.appDefinition);
        }
    }

    allAppsCache = definitions.sort((a, b) => a.name.localeCompare(b.name));
    return allAppsCache;
}

export const getAppDefinitionById = async (id: string): Promise<AppDefinition | undefined> => {
    const apps = await getAppDefinitions();
    return apps.find(app => app.id === id);
}
